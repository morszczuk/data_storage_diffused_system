SOCKETS TUTORIAL 
                                                             by Marcin Borkowski
				  marcinbo (at) mini (dot) pw (dot) edu (dot) pl
--------------------------------------------------------------------------------
TASK:
Write simple integer calculator server. Data send to server consists of:
	-operand 1
	-operand 2
	-result
	-operation
	-status
all stored as 32 bit integers.

Server calculates the results of operation (+,-,*,/) on operands and sends
the result back to the client. If operation is possible status returned is 1,
otherwise it should be 0. Server must work with 3 types of connection:
	-local socket
	-inet socket tcp
	-inet socket udp

Server is single process application, it takes 2 parameters:
	-local socket file name
	-port (for both tcp and udp connections)
If parameters are missing, usage information must be displayed.
	
Write 3 types of client:
	-one that works on local connection
	-one that works on remote tcp connection
	-one that works on remote udp connection
		
Clients take the following parameters:
	-address of the host (file name for local connection, domain name for
	inet)
	-port (inet clients only)
	-operand 1
	-operand 2
	-operation (+,-,*,%)
If parameters are missing, usage information must be displayed. On success
client displays the result on the screen. If UDP client does not receive the
response within 1second it should terminate.

All above programs can be interrupted with C-c, server may NOT leave
local socket file undeleted in such a case. 
--------------------------------------------------------------------------------
---STAGE 0 START:---------------------------------------------------------------
	-write Makefile for the tutorial
	-write server and clients stubs, that only check parameters and
	display usage information when necessary.
	ATTENTION: is a stage similar for all the task, it is reasonable to
	always prepare such a stubs before the graded laboratory !
---Makefile---------------------------------------------------------------------
all: clientLocal clientTCP clientUDP  server
clientTCP: clientTCP.c	
	gcc -Wall -o clientTCP clientTCP.c
clientUDP: clientUDP.c	
	gcc -Wall -o clientUDP clientUDP.c
clientLocal: clientLocal.c	
	gcc -Wall -o clientLocal clientLocal.c
server: server.c	
	gcc -Wall -o server server.c
.PHONY: clean
clean:
	rm clientLocal clientUDP clientTCP server
---server.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

void usage(char * name){
	fprintf(stderr,"USAGE: %s socket port\n",name);
}

int main(int argc, char** argv) {
	if(argc!=3) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	return EXIT_SUCCESS;
}
---clientTCP.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

void usage(char * name){
	fprintf(stderr,"USAGE: %s domain port  operand1 operand2 operation \n",name);
}

int main(int argc, char** argv) {
	if(argc!=6) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	return EXIT_SUCCESS;
}
---clientUDP.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

void usage(char * name){
	fprintf(stderr,"USAGE: %s domain port  operand1 operand2 operation \n",name);
}

int main(int argc, char** argv) {
	if(argc!=6) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	return EXIT_SUCCESS;
}
---clientLocal.c-------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

void usage(char * name){
	fprintf(stderr,"USAGE: %s socket operand1 operand2 operation \n",name);
}

int main(int argc, char** argv) {
	if(argc!=5) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	return EXIT_SUCCESS;
}
---STAGE 0 END------------------------------------------------------------------
---STAGE 1 START:---------------------------------------------------------------
	-Add local socket connection to server, server only accepts one client
	then sleeps 2 sec and exits.
	-Add local socket connection to clientLocal,  
	only connects then exits on connection close
	ATTENTION this part also can be prepared in advance, as socket
	connecting is completed in the same way in all the programs.
---clientLocal.c-------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/un.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

int make_socket(char* name , struct sockaddr_un *addr){
	int socketfd;
	if((socketfd = socket(PF_UNIX,SOCK_STREAM,0))<0) ERR("socket");
	memset(addr, 0, sizeof(struct sockaddr_un));
	addr->sun_family = AF_UNIX;
	strncpy(addr->sun_path,name,sizeof(addr->sun_path)-1);
	return socketfd;
}

int connect_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
	socketfd = make_socket(name,&addr);
	if(connect(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0){
		if(errno!=EINTR) ERR("connect");
		else { 
			fd_set wfds ;
			int status;
			socklen_t size = sizeof(int);
			FD_ZERO(&wfds);
			FD_SET(socketfd, &wfds);
			if(TEMP_FAILURE_RETRY(select(socketfd+1,NULL,&wfds,NULL,NULL))<0) ERR("select");
			if(getsockopt(socketfd,SOL_SOCKET,SO_ERROR,&status,&size)<0) ERR("getsockopt");
			if(0!=status) ERR("connect");
		}
	}
	return socketfd;
}

void usage(char * name){
	fprintf(stderr,"USAGE: %s socket operand1 operand2 operation \n",name);
}

int main(int argc, char** argv) {
	int fd;
	char buf[10];
	if(argc!=5) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	fd=connect_socket(argv[1]);
	while(read(fd,buf,10) >0);
	if(TEMP_FAILURE_RETRY(close(fd))<0)ERR("close");
	fprintf(stderr,"Client has terminated.\n");
	return EXIT_SUCCESS;
}
---server.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

#define BACKLOG 3

int make_socket(char* name , struct sockaddr_un *addr){
	int socketfd;
	if((socketfd = socket(PF_UNIX,SOCK_STREAM,0))<0) ERR("socket");
	memset(addr, 0, sizeof(struct sockaddr_un));
	addr->sun_family = AF_UNIX;
	strncpy(addr->sun_path,name,sizeof(addr->sun_path)-1);
	return socketfd;
}

int bind_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
        if(unlink(name) <0&&errno!=ENOENT) ERR("unlink");
	socketfd = make_socket(name,&addr);
	if(bind(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0)  ERR("bind");
	if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int add_new_client(int sfd){
	int nfd;
	if((nfd=TEMP_FAILURE_RETRY(accept(sfd,NULL,NULL)))<0) ERR("accept");
	return nfd;
}


void usage(char * name){
	fprintf(stderr,"USAGE: %s socket port\n",name);
}

int main(int argc, char** argv) {
	int fdL;
	int cfd;
	if(argc!=3) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	fdL=bind_socket(argv[1]);
	cfd=add_new_client(fdL);
	sleep(2); /*no signal handlers, this part will be changed soon*/
	if(TEMP_FAILURE_RETRY(close(cfd))<0)ERR("close");
	if(TEMP_FAILURE_RETRY(close(fdL))<0)ERR("close");
	fprintf(stderr,"Server has terminated.\n");
	
	return EXIT_SUCCESS;
}
--------------------------------------------------------------------------------
Test with the command: ./server a 1 & ./clientLocal a 1 1 1
---STAGE 1 END------------------------------------------------------------------
---STAGE 2 START:---------------------------------------------------------------
	-on normal termination server should unlink socket (but server never
	terminates normally) 
	-server accepts many connections, each connection is handled
	immediately
	-server receives data 5 x integer(32bits) and sends it back
	unmodified, client socket is closed
	-socket prematurely  closed by the client must not affect server
	-client sends request and prints out the result
	-both programs must properly handle socket disconnection
---server.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

#define BACKLOG 3

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(char* name , struct sockaddr_un *addr){
	int socketfd;
	if((socketfd = socket(PF_UNIX,SOCK_STREAM,0))<0) ERR("socket");
	memset(addr, 0, sizeof(struct sockaddr_un));
	addr->sun_family = AF_UNIX;
	strncpy(addr->sun_path,name,sizeof(addr->sun_path)-1);
	return socketfd;
}

int bind_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
        if(unlink(name) <0&&errno!=ENOENT) ERR("unlink");
	socketfd = make_socket(name,&addr);
	if(bind(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0)  ERR("bind");
	if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int add_new_client(int sfd){
	int nfd;
	if((nfd=TEMP_FAILURE_RETRY(accept(sfd,NULL,NULL)))<0) ERR("accept");
	return nfd;
}


void usage(char * name){
	fprintf(stderr,"USAGE: %s socket port\n",name);
}

ssize_t bulk_read(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(read(fd,buf,count));
		if(c<0) return c;
		if(0==c) return len;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

ssize_t bulk_write(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(write(fd,buf,count));
		if(c<0) return c;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

void doServer(int fdL){
	int cfd;
	int32_t data[5];
	ssize_t size;
	for(;;){
		cfd=add_new_client(fdL);
		/*
		 * as server does not use data no byte order conversion is needed now
		 */
		if((size=bulk_read(cfd,(char *)data,sizeof(int32_t[5])))<0) ERR("read:");
		if(size==(int)sizeof(int32_t[5]))
			if(bulk_write(cfd,(char *)data,sizeof(int32_t[5]))<0&&errno!=EPIPE) ERR("write:");
		if(TEMP_FAILURE_RETRY(close(cfd))<0)ERR("close");
	}
}

int main(int argc, char** argv) {
	int fdL;
	if(argc!=3) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	fdL=bind_socket(argv[1]);
	doServer(fdL);
	if(TEMP_FAILURE_RETRY(close(fdL))<0)ERR("close");
        if(unlink(argv[1])<0)ERR("unlink");
	fprintf(stderr,"Server has terminated.\n");
	return EXIT_SUCCESS;
}
---clientLocal.c-------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/un.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(char* name , struct sockaddr_un *addr){
	int socketfd;
	if((socketfd = socket(PF_UNIX,SOCK_STREAM,0))<0) ERR("socket");
	memset(addr, 0, sizeof(struct sockaddr_un));
	addr->sun_family = AF_UNIX;
	strncpy(addr->sun_path,name,sizeof(addr->sun_path)-1);
	return socketfd;
}

int connect_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
	socketfd = make_socket(name,&addr);
	if(connect(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0){
		if(errno!=EINTR) ERR("connect");
		else { 
			fd_set wfds ;
			int status;
			socklen_t size = sizeof(int);
			FD_ZERO(&wfds);
			FD_SET(socketfd, &wfds);
			if(TEMP_FAILURE_RETRY(select(socketfd+1,NULL,&wfds,NULL,NULL))<0) ERR("select");
			if(getsockopt(socketfd,SOL_SOCKET,SO_ERROR,&status,&size)<0) ERR("getsockopt");
			if(0!=status) ERR("connect");
		}
	}
	return socketfd;
}

void usage(char * name){
	fprintf(stderr,"USAGE: %s socket operand1 operand2 operation \n",name);
}

ssize_t bulk_read(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(read(fd,buf,count));
		if(c<0) return c;
		if(0==c) return len;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

ssize_t bulk_write(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(write(fd,buf,count));
		if(c<0) return c;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

void prepare_request(char **argv,int32_t data[5]){
	data[0]=htonl(atoi(argv[2]));
	data[1]=htonl(atoi(argv[3]));
	data[2]=htonl(0);
	data[3]=htonl((int32_t)(argv[4][0]));
	data[4]=htonl(1);
}

void print_answer(int32_t data[5]){
	if(ntohl(data[4]))
		printf("%d %c %d = %d\n", ntohl(data[0]),(char)ntohl(data[3]), ntohl(data[1]), ntohl(data[2]));
	else printf("Operation impossible\n");
}

int main(int argc, char** argv) {
	int fd;
	int32_t data[5];
	if(argc!=5) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	fd=connect_socket(argv[1]);
	prepare_request(argv,data);
	/*
	 * Broken PIPE is treated as critical error here
	 */
	if(bulk_write(fd,(char *)data,sizeof(int32_t[5]))<0) ERR("write:");
	if(bulk_read(fd,(char *)data,sizeof(int32_t[5]))<(int)sizeof(int32_t[5])) ERR("read:");
	print_answer(data);
	if(TEMP_FAILURE_RETRY(close(fd))<0)ERR("close");
	return EXIT_SUCCESS;
}
--------------------------------------------------------------------------------
Test with the commands: ./server a 1 &
		       ./clientLocal a 2 1 +
		       killall server
---STAGE 2 END------------------------------------------------------------------
---STAGE 3 START:---------------------------------------------------------------
	-Convert data byte order on the server
	-Add expression calculations to the server
	-Add SIGINT handler
---server.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#include <fcntl.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

#define BACKLOG 3

volatile sig_atomic_t do_work=1 ;

void sigint_handler(int sig) {
	do_work=0;
}

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(char* name , struct sockaddr_un *addr){
	int socketfd;
	if((socketfd = socket(PF_UNIX,SOCK_STREAM,0))<0) ERR("socket");
	memset(addr, 0, sizeof(struct sockaddr_un));
	addr->sun_family = AF_UNIX;
	strncpy(addr->sun_path,name,sizeof(addr->sun_path)-1);
	return socketfd;
}

int bind_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
        if(unlink(name) <0&&errno!=ENOENT) ERR("unlink");
	socketfd = make_socket(name,&addr);
	if(bind(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0)  ERR("bind");
	if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int add_new_client(int sfd){
	int nfd;
	if((nfd=TEMP_FAILURE_RETRY(accept(sfd,NULL,NULL)))<0) {
		if(EAGAIN==errno||EWOULDBLOCK==errno) return -1;
		ERR("accept");
	}
	return nfd;
}


void usage(char * name){
	fprintf(stderr,"USAGE: %s socket port\n",name);
}

ssize_t bulk_read(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(read(fd,buf,count));
		if(c<0) return c;
		if(0==c) return len;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

ssize_t bulk_write(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(write(fd,buf,count));
		if(c<0) return c;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

void calculate(int32_t data[5]){
	int32_t op1,op2,result,status=1;
	op1=ntohl(data[0]);
	op2=ntohl(data[1]);
	switch((char)ntohl(data[3])){
		case '+':result=op1+op2;
		break;
		case '-':result=op1-op2;
		break;
		case '*':result=op1*op2;
		break;
		case '/':if(!op2) status=0 ;
		    else result=op1/op2;
		    break;
		default: status=0;
	}
	data[4]=htonl(status);
	data[2]=htonl(result);
}

void doServer(int fdL){
	int cfd;
	int32_t data[5];
	ssize_t size;
	fd_set base_rfds, rfds ;
	sigset_t mask, oldmask;
	FD_ZERO(&base_rfds);
	FD_SET(fdL, &base_rfds);
	sigemptyset (&mask);
	sigaddset (&mask, SIGINT);
	sigprocmask (SIG_BLOCK, &mask, &oldmask);
	while(do_work){
		rfds=base_rfds;
		if(pselect(fdL+1,&rfds,NULL,NULL,NULL,&oldmask)>0){
		if((cfd=add_new_client(fdL))>=0){;
			if((size=bulk_read(cfd,(char *)data,sizeof(int32_t[5])))<0) ERR("read:");
			if(size==(int)sizeof(int32_t[5])){
				calculate(data);
				if(bulk_write(cfd,(char *)data,sizeof(int32_t[5]))<0&&errno!=EPIPE) ERR("write:");
			}
			if(TEMP_FAILURE_RETRY(close(cfd))<0)ERR("close");
		}
		}else{
			if(EINTR==errno) continue;
			ERR("pselect");
		}
	}
	sigprocmask (SIG_UNBLOCK, &mask, NULL);
}

int main(int argc, char** argv) {
	int fdL;
	int new_flags;
	if(argc!=3) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	if(sethandler(sigint_handler,SIGINT)) ERR("Seting SIGINT:");
	fdL=bind_socket(argv[1]);
	new_flags = fcntl(fdL, F_GETFL) | O_NONBLOCK;
	fcntl(fdL, F_SETFL, new_flags);
	doServer(fdL);
	if(TEMP_FAILURE_RETRY(close(fdL))<0)ERR("close");
        if(unlink(argv[1])<0)ERR("unlink");
	fprintf(stderr,"Server has terminated.\n");
	return EXIT_SUCCESS;
}
--------------------------------------------------------------------------------
Test with the commands: ./server a 1 &
		       ./clientLocal a 2 1 +
		       ./clientLocal a 2 1 '*'
		       ./clientLocal a 2 0 /
		       killall -s SIGINT server
---STAGE 3 END------------------------------------------------------------------
---STAGE 4 START:---------------------------------------------------------------
	-add TCP client
	-add TCP socket to the server
---clientTCP.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))
#define HERR(source) (fprintf(stderr,"%s(%d) at %s:%d\n",source,h_errno,__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(void){
	int sock;
	sock = socket(PF_INET,SOCK_STREAM,0);
	if(sock < 0) ERR("socket");
	return sock;
}

struct sockaddr_in make_address(char *address, uint16_t port){
	struct sockaddr_in addr;
	struct hostent *hostinfo;
	addr.sin_family = AF_INET;
	addr.sin_port = htons (port);
	hostinfo = gethostbyname(address);
	if(hostinfo == NULL)HERR("gethostbyname");
	addr.sin_addr = *(struct in_addr*) hostinfo->h_addr;
	return addr;
}

int connect_socket(char *name, uint16_t port){
	struct sockaddr_in addr;
	int socketfd;
	socketfd = make_socket();
	addr=make_address(name,port);
	if(connect(socketfd,(struct sockaddr*) &addr,sizeof(struct sockaddr_in)) < 0){
		if(errno!=EINTR) ERR("connect");
		else { 
			fd_set wfds ;
			int status;
			socklen_t size = sizeof(int);
			FD_ZERO(&wfds);
			FD_SET(socketfd, &wfds);
			if(TEMP_FAILURE_RETRY(select(socketfd+1,NULL,&wfds,NULL,NULL))<0) ERR("select");
			if(getsockopt(socketfd,SOL_SOCKET,SO_ERROR,&status,&size)<0) ERR("getsockopt");
			if(0!=status) ERR("connect");
		}
	}
	return socketfd;
}

ssize_t bulk_read(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(read(fd,buf,count));
		if(c<0) return c;
		if(0==c) return len;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

ssize_t bulk_write(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(write(fd,buf,count));
		if(c<0) return c;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

void prepare_request(char **argv,int32_t data[5]){
	data[0]=htonl(atoi(argv[3]));
	data[1]=htonl(atoi(argv[4]));
	data[2]=htonl(0);
	data[3]=htonl((int32_t)(argv[5][0]));
	data[4]=htonl(1);
}

void print_answer(int32_t data[5]){
	if(ntohl(data[4]))
		printf("%d %c %d = %d\n", ntohl(data[0]),(char)ntohl(data[3]), ntohl(data[1]), ntohl(data[2]));
	else printf("Operation impossible\n");
}

void usage(char * name){
	fprintf(stderr,"USAGE: %s domain port  operand1 operand2 operation \n",name);
}

int main(int argc, char** argv) {
	int fd;
	int32_t data[5];
	if(argc!=6) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	fd=connect_socket(argv[1],atoi(argv[2]));
	prepare_request(argv,data);
	/*
	 * Broken PIPE is treated as critical error here
	 */
	if(bulk_write(fd,(char *)data,sizeof(int32_t[5]))<0) ERR("write:");
	if(bulk_read(fd,(char *)data,sizeof(int32_t[5]))<(int)sizeof(int32_t[5])) ERR("read:");
	print_answer(data);
	if(TEMP_FAILURE_RETRY(close(fd))<0)ERR("close");
	return EXIT_SUCCESS;
}
---server.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#include <fcntl.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

#define BACKLOG 3

volatile sig_atomic_t do_work=1 ;

void sigint_handler(int sig) {
	do_work=0;
}

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(int domain, int type){
	int sock;
	sock = socket(domain,type,0);
	if(sock < 0) ERR("socket");
	return sock;
}

int bind_local_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
        if(unlink(name) <0&&errno!=ENOENT) ERR("unlink");
	socketfd = make_socket(PF_UNIX,SOCK_STREAM);
	memset(&addr, 0, sizeof(struct sockaddr_un));
	addr.sun_family = AF_UNIX;
	strncpy(addr.sun_path,name,sizeof(addr.sun_path)-1);
	if(bind(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0)  ERR("bind");
	if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int bind_tcp_socket(uint16_t port){
	struct sockaddr_in addr;
	int socketfd,t=1;
	socketfd = make_socket(PF_INET,SOCK_STREAM);
	memset(&addr, 0, sizeof(struct sockaddr_in));
	addr.sin_family = AF_INET;
	addr.sin_port = htons(port);
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	if (setsockopt(socketfd, SOL_SOCKET, SO_REUSEADDR,&t, sizeof(t))) ERR("setsockopt");
	if(bind(socketfd,(struct sockaddr*) &addr,sizeof(addr)) < 0)  ERR("bind");
	if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int add_new_client(int sfd){
	int nfd;
	if((nfd=TEMP_FAILURE_RETRY(accept(sfd,NULL,NULL)))<0) {
		if(EAGAIN==errno||EWOULDBLOCK==errno) return -1;
		ERR("accept");
	}
	return nfd;
}


void usage(char * name){
	fprintf(stderr,"USAGE: %s socket port\n",name);
}

ssize_t bulk_read(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(read(fd,buf,count));
		if(c<0) return c;
		if(0==c) return len;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

ssize_t bulk_write(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(write(fd,buf,count));
		if(c<0) return c;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

void calculate(int32_t data[5]){
	int32_t op1,op2,result,status=1;
	op1=ntohl(data[0]);
	op2=ntohl(data[1]);
	switch((char)ntohl(data[3])){
		case '+':result=op1+op2;
		break;
		case '-':result=op1-op2;
		break;
		case '*':result=op1*op2;
		break;
		case '/':if(!op2) status=0 ;
		    else result=op1/op2;
		    break;
		default: status=0;
	}
	data[4]=htonl(status);
	data[2]=htonl(result);
}

void communicate(int cfd){
	ssize_t size;
	int32_t data[5];
	if((size=bulk_read(cfd,(char *)data,sizeof(int32_t[5])))<0) ERR("read:");
	if(size==(int)sizeof(int32_t[5])){
		calculate(data);
		if(bulk_write(cfd,(char *)data,sizeof(int32_t[5]))<0&&errno!=EPIPE) ERR("write:");
	}
	if(TEMP_FAILURE_RETRY(close(cfd))<0)ERR("close");
}

void doServer(int fdL, int fdT){
	int cfd,fdmax;
	fd_set base_rfds, rfds ;
	sigset_t mask, oldmask;
	FD_ZERO(&base_rfds);
	FD_SET(fdL, &base_rfds);
	FD_SET(fdT, &base_rfds);
	fdmax=(fdT>fdL?fdT:fdL);
	sigemptyset (&mask);
	sigaddset (&mask, SIGINT);
	sigprocmask (SIG_BLOCK, &mask, &oldmask);
	while(do_work){
		rfds=base_rfds;
		if(pselect(fdmax+1,&rfds,NULL,NULL,NULL,&oldmask)>0){
			if(FD_ISSET(fdL,&rfds)) cfd=add_new_client(fdL);
			else  cfd=add_new_client(fdT);
			if(cfd>=0)communicate(cfd);
		}else{
			if(EINTR==errno) continue;
			ERR("pselect");
		}
	}
	sigprocmask (SIG_UNBLOCK, &mask, NULL);
}

int main(int argc, char** argv) {
	int fdL,fdT;
	int new_flags;
	if(argc!=3) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	if(sethandler(sigint_handler,SIGINT)) ERR("Seting SIGINT:");
	fdL=bind_local_socket(argv[1]);
	new_flags = fcntl(fdL, F_GETFL) | O_NONBLOCK;
	fcntl(fdL, F_SETFL, new_flags);
	fdT=bind_tcp_socket(atoi(argv[2]));
	new_flags = fcntl(fdT, F_GETFL) | O_NONBLOCK;
	fcntl(fdT, F_SETFL, new_flags);
	doServer(fdL,fdT);
	if(TEMP_FAILURE_RETRY(close(fdL))<0)ERR("close");
        if(unlink(argv[1])<0)ERR("unlink");
	if(TEMP_FAILURE_RETRY(close(fdT))<0)ERR("close");
	fprintf(stderr,"Server has terminated.\n");
	return EXIT_SUCCESS;
}
--------------------------------------------------------------------------------
Test with the commands: ./server a 2000 &
			./clientTCP localhost 2000 234 17  /
		        killall -s SIGINT server
---STAGE 4 END------------------------------------------------------------------
---STAGE 5 START:---------------------------------------------------------------
	-finally, add UDP client with 1s timeout on answer 
	-make sure that any of sockets (TCP,UDP or Local) can not starve
	-server UDP socket
---clientUDP.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))
#define HERR(source) (fprintf(stderr,"%s(%d) at %s:%d\n",source,h_errno,__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

volatile sig_atomic_t last_signal=0 ;

void sigalrm_handler(int sig) {
	last_signal=sig;
}

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(void){
	int sock;
	sock = socket(PF_INET,SOCK_DGRAM,0);
	if(sock < 0) ERR("socket");
	return sock;
}

struct sockaddr_in make_address(char *address, uint16_t port){
	struct sockaddr_in addr;
	struct hostent *hostinfo;
	addr.sin_family = AF_INET;
	addr.sin_port = htons (port);
	hostinfo = gethostbyname(address);
	if(hostinfo == NULL)HERR("gethostbyname");
	addr.sin_addr = *(struct in_addr*) hostinfo->h_addr;
	return addr;
}

void prepare_request(char **argv,int32_t data[5]){
	data[0]=htonl(atoi(argv[3]));
	data[1]=htonl(atoi(argv[4]));
	data[2]=htonl(0);
	data[3]=htonl((int32_t)(argv[5][0]));
	data[4]=htonl(1);
}

void print_answer(int32_t data[5]){
	if(ntohl(data[4]))
		printf("%d %c %d = %d\n", ntohl(data[0]),(char)ntohl(data[3]), ntohl(data[1]), ntohl(data[2]));
	else printf("Operation impossible\n");
}

void usage(char * name){
	fprintf(stderr,"USAGE: %s domain port  operand1 operand2 operation \n",name);
}

int main(int argc, char** argv) {
	int fd;
	struct sockaddr_in addr;
	int32_t data[5];
	if(argc!=6) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	if(sethandler(sigalrm_handler,SIGALRM)) ERR("Seting SIGALRM:");
	fd = make_socket();
	addr=make_address(argv[1],atoi(argv[2]));
	prepare_request(argv,data);
	/*
	 * Broken PIPE is treated as critical error here
	 */
	if(TEMP_FAILURE_RETRY(sendto(fd,(char *)data,sizeof(int32_t[5]),0,&addr,sizeof(addr)))<0)
		ERR("sendto:");
	alarm(1);
	while(recv(fd,(char *)data,sizeof(int32_t[5]),0)<0){
		if(EINTR!=errno)ERR("recv:");
		if(SIGALRM==last_signal) break;
	}
	if(last_signal!=SIGALRM)print_answer(data);
	if(TEMP_FAILURE_RETRY(close(fd))<0)ERR("close");
	return EXIT_SUCCESS;
}
---server.c---------------------------------------------------------------------
#define _GNU_SOURCE 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <signal.h>
#include <netdb.h>
#include <fcntl.h>
#define ERR(source) (perror(source),\
		     fprintf(stderr,"%s:%d\n",__FILE__,__LINE__),\
		     exit(EXIT_FAILURE))

#define BACKLOG 3

volatile sig_atomic_t do_work=1 ;

void sigint_handler(int sig) {
	do_work=0;
}

int sethandler( void (*f)(int), int sigNo) {
	struct sigaction act;
	memset(&act, 0, sizeof(struct sigaction));
	act.sa_handler = f;
	if (-1==sigaction(sigNo, &act, NULL))
		return -1;
	return 0;
}

int make_socket(int domain, int type){
	int sock;
	sock = socket(domain,type,0);
	if(sock < 0) ERR("socket");
	return sock;
}

int bind_local_socket(char *name){
	struct sockaddr_un addr;
	int socketfd;
        if(unlink(name) <0&&errno!=ENOENT) ERR("unlink");
	socketfd = make_socket(PF_UNIX,SOCK_STREAM);
	memset(&addr, 0, sizeof(struct sockaddr_un));
	addr.sun_family = AF_UNIX;
	strncpy(addr.sun_path,name,sizeof(addr.sun_path)-1);
	if(bind(socketfd,(struct sockaddr*) &addr,SUN_LEN(&addr)) < 0)  ERR("bind");
	if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int bind_inet_socket(uint16_t port,int type){
	struct sockaddr_in addr;
	int socketfd,t=1;
	socketfd = make_socket(PF_INET,type);
	memset(&addr, 0, sizeof(struct sockaddr_in));
	addr.sin_family = AF_INET;
	addr.sin_port = htons(port);
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	if (setsockopt(socketfd, SOL_SOCKET, SO_REUSEADDR,&t, sizeof(t))) ERR("setsockopt");
	if(bind(socketfd,(struct sockaddr*) &addr,sizeof(addr)) < 0)  ERR("bind");
	if(SOCK_STREAM==type)
		if(listen(socketfd, BACKLOG) < 0) ERR("listen");
	return socketfd;
}

int add_new_client(int sfd){
	int nfd;
	if((nfd=TEMP_FAILURE_RETRY(accept(sfd,NULL,NULL)))<0) {
		if(EAGAIN==errno||EWOULDBLOCK==errno) return -1;
		ERR("accept");
	}
	return nfd;
}

void usage(char * name){
	fprintf(stderr,"USAGE: %s socket port\n",name);
}

ssize_t bulk_read(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(read(fd,buf,count));
		if(c<0) return c;
		if(0==c) return len;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

ssize_t bulk_write(int fd, char *buf, size_t count){
	int c;
	size_t len=0;
	do{
		c=TEMP_FAILURE_RETRY(write(fd,buf,count));
		if(c<0) return c;
		buf+=c;
		len+=c;
		count-=c;
	}while(count>0);
	return len ;
}

void calculate(int32_t data[5]){
	int32_t op1,op2,result,status=1;
	op1=ntohl(data[0]);
	op2=ntohl(data[1]);
	switch((char)ntohl(data[3])){
		case '+':result=op1+op2;
		break;
		case '-':result=op1-op2;
		break;
		case '*':result=op1*op2;
		break;
		case '/':if(!op2) status=0 ;
		    else result=op1/op2;
		    break;
		default: status=0;
	}
	data[4]=htonl(status);
	data[2]=htonl(result);
}

void communicateStream(int cfd){
	ssize_t size;
	int32_t data[5];
	if((size=bulk_read(cfd,(char *)data,sizeof(int32_t[5])))<0) ERR("read:");
	if(size==(int)sizeof(int32_t[5])){
		calculate(data);
		if(bulk_write(cfd,(char *)data,sizeof(int32_t[5]))<0&&errno!=EPIPE) ERR("write:");
	}
	if(TEMP_FAILURE_RETRY(close(cfd))<0)ERR("close");
}

void communicateDgram(int fd){
	struct sockaddr_in addr;
	int32_t data[5];
	socklen_t size=sizeof(addr);;
	if(TEMP_FAILURE_RETRY(recvfrom(fd,(char *)data,sizeof(int32_t[5]),0,&addr,&size))<0) ERR("read:");
	calculate(data);
	if(TEMP_FAILURE_RETRY(sendto(fd,(char *)data,sizeof(int32_t[5]),0,&addr,sizeof(addr)))<0&&errno!=EPIPE) ERR("write:");
}

void doServer(int fdL, int fdT, int fdU){
	int cfd,fdmax;
	fd_set base_rfds, rfds ;
	sigset_t mask, oldmask;
	FD_ZERO(&base_rfds);
	FD_SET(fdL, &base_rfds);
	FD_SET(fdT, &base_rfds);
	FD_SET(fdU, &base_rfds);
	fdmax=(fdT>fdL?fdT:fdL);
	fdmax=(fdU>fdmax?fdU:fdmax);
	sigemptyset (&mask);
	sigaddset (&mask, SIGINT);
	sigprocmask (SIG_BLOCK, &mask, &oldmask);
	while(do_work){
		rfds=base_rfds;
		cfd=-1;
		if(pselect(fdmax+1,&rfds,NULL,NULL,NULL,&oldmask)>0){
			if(FD_ISSET(fdL,&rfds)){
				cfd=add_new_client(fdL);
				if(cfd>=0)communicateStream(cfd);
			}
			if(FD_ISSET(fdT,&rfds)){
				cfd=add_new_client(fdT);
				if(cfd>=0)communicateStream(cfd);
			}
			if(FD_ISSET(fdU,&rfds))
				communicateDgram(fdU);

		}else{
			if(EINTR==errno) continue;
			ERR("pselect");
		}
	}
	sigprocmask (SIG_UNBLOCK, &mask, NULL);
}

int main(int argc, char** argv) {
	int fdL,fdT,fdU;
	int new_flags;
	if(argc!=3) {
		usage(argv[0]);
		return EXIT_FAILURE;
	}
	if(sethandler(SIG_IGN,SIGPIPE)) ERR("Seting SIGPIPE:");
	if(sethandler(sigint_handler,SIGINT)) ERR("Seting SIGINT:");
	fdL=bind_local_socket(argv[1]);
	new_flags = fcntl(fdL, F_GETFL) | O_NONBLOCK;
	fcntl(fdL, F_SETFL, new_flags);
	fdT=bind_inet_socket(atoi(argv[2]),SOCK_STREAM);
	new_flags = fcntl(fdT, F_GETFL) | O_NONBLOCK;
	fcntl(fdT, F_SETFL, new_flags);
	fdU=bind_inet_socket(atoi(argv[2]),SOCK_DGRAM);
	doServer(fdL,fdT,fdU);
	if(TEMP_FAILURE_RETRY(close(fdL))<0)ERR("close");
        if(unlink(argv[1])<0)ERR("unlink");
	if(TEMP_FAILURE_RETRY(close(fdT))<0)ERR("close");
	if(TEMP_FAILURE_RETRY(close(fdU))<0)ERR("close");
	fprintf(stderr,"Server has terminated.\n");
	return EXIT_SUCCESS;
}
--------------------------------------------------------------------------------
Test with the commands: ./server a 2000 &
			./clientUDP localhost 2000 3022 42332 '*'
		        killall -s SIGINT server
---STAGE 5 END------------------------------------------------------------------
